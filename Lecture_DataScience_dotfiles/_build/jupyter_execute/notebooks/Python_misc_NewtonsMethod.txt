import numpy as np 
from matplotlib import pyplot as plt


## 多項式の係数を定義
cs = np.array( [1.0, 1.0, 2.0, 3.0, 4.0, 5.0] )

## 愚直に多項式とその微分を定義
def xpoly(x):
    return np.array([1.0,x,x**2,x**3,x**4,x**5])
def xpoly_prime(x):
    return np.array([0.0,1.0,2*x,3*x**2,4*x**3,5*x**4])

# 適当な区間で点を作成して描画してみる
xr = np.arange(-100,100,1.0) 
yr = np.array([ np.dot(cs,xpoly(x)) for x in xr])
fig = plt.figure(figsize = (20,4))
ax = fig.add_subplot(111)
ax.plot(xr,yr)
ax.plot(xr,0.0*yr,linestyle="dotted",color="gray") # y=0
plt.show()
plt.close() 


def Newton(cs,xini,tolxrel=1.e-6,toly=1.e-6,maxit=1000):
    xp = xpoly(xini)
    xpp = xpoly_prime(xini)
    x = xini
    itnum = 0
    while True:
        y = np.dot(cs,xp)
        yp = np.dot(cs,xpp)        
        delta = y / yp
        x += - delta
        xp = xpoly(x)
        xpp = xpoly_prime(x)
        ynew = np.dot(cs,xp)
        itnum += 1
        print("it", itnum, "x",x, "y", y,ynew)
        if abs(delta/x) < tolxrel and abs(ynew) <toly:
            break
        if  itnum == maxit:
            print("x not converged")
            return None
    print("x", xini, "=>", x, " after ",itnum, "iterations")
    return x 

x_initial = -20.0
Newton(cs,x_initial)
