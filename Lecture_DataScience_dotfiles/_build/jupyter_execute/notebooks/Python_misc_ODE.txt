#使用するモジュールのimport
import numpy as np
from matplotlib import pyplot as plt

# f(x,t)のトイモデルとして dx/dt = -2tx^2 というものを考える
def f(x,t): 
    return -  2.0*  x * x * t
#時刻tを間隔hで細かく分割する
h = 1.e-4
tr = np.arange(0.0,1.0,h) 
#初期条件
x0 = 1.0 

#求解
x = x0
xs = [x0]
for t in tr:
    x += h * f(x,t)
    xs += [x]

#描画
fig = plt.figure(figsize=(10,3))
plt.xlabel("t");plt.ylabel("x")
plt.plot(tr,xs[:-1])
plt.show()
plt.close()

def fexact(t):
    return x0/(x0* t*t + 1.0)
xe = np.array([ fexact(t) for t in tr])
fig = plt.figure(figsize=(10,3))
plt.xlabel("t"); plt.ylabel("abs. diff.")
plt.yscale("log")
plt.plot(tr,abs(xe-np.array(xs[:-1])))
plt.show()
plt.close()

#求解(RK4)
xsRK4 = [x0]
x = x0
for t in tr:
    f1 = f(x,t)
    f2 = f(x+0.5*h*f1, t+0.5*h)
    f3 = f(x+0.5*h*f2, t+0.5*h)
    f4 = f(x+h*f3, t+h)
    x += h*(f1 + 2*f2 + 2*f3 + f4)/6.0
    xsRK4 += [x]
#描画
fig = plt.figure(figsize=(10,3))
plt.xlabel("t");plt.ylabel("abs. diff.")
plt.yscale("log")
plt.plot(tr,abs(xe-np.array(xs[:-1])),label="Euler")
plt.plot(tr,abs(xe-np.array(xsRK4[:-1])),label="RK4")
plt.legend()
plt.show()
plt.close()

def AB4(x0,m=4):
    xsAB = [x0]
    x = x0
    fs = [ 0.0 for i in range(m)]
    for i,t in enumerate(tr):
        if len(xsAB) < m : #RK4
            f1 = f(x,t)
            f2 = f(x+0.5*h*f1, t+0.5*h)
            f3 = f(x+0.5*h*f2, t+0.5*h)
            f4 = f(x+h*f3, t+h)
            x += h*(f1 + 2*f2+ 2*f3 + f4)/6.0
            fs[0] = f1; fs[1] = f2; fs[2] = f3; fs[3] = f4
        else:
            f1,f2,f3 = fs[1:]
            f4 = f(x,t)
            x += h *(-9*f1 +37*f2 -59*f3 +55*f4 )/24.0 
            fs[0] = f1; fs[1] = f2; fs[2] = f3; fs[3] = f4
        xsAB += [x]
    return xsAB

xsAB4 = AB4(x0)
#描画
fig = plt.figure(figsize=(10,3))
plt.xlabel("t");plt.ylabel("abs. diff.")
plt.yscale("log")
plt.plot(tr,abs(xe-np.array(xs[:-1])),label="Euler")
plt.plot(tr,abs(xe-np.array(xsRK4[:-1])),label="RK4")
plt.plot(tr,abs(xe-np.array(xsAB4[:-1])),label="AB4")
plt.legend()
plt.show()
plt.close()

def ABM(x0,m=4):
    xsABM = [x0]
    x = x0
    fs = [ 0.0 for i in range(m)]
    for i,t in enumerate(tr):
        if len(xsABM) < m : #RK4
            f1 = f(x,t)
            f2 = f(x+0.5*h*f1, t+0.5*h)
            f3 = f(x+0.5*h*f2, t+0.5*h)
            f4 = f(x+h*f3, t+h)
            x += h*(f1 + 2*f2+ 2*f3 + f4)/6.0
            fs[0] = f1; fs[1] = f2; fs[2] = f3; fs[3] = f4
        else:
            f1,f2,f3 = fs[1:]; f4 = f(x,t)
            ## 予測子
            xp = x + h *(-9*f1+37*f2-59*f3+55*f4) / 24.0            
            f5 = f(xp,t+h)
            ## 修正子
            x += h *(f2 -5*f3 +19*f4 +9*f5 )/24.0 
            fs[0] = f1; fs[1] = f2; fs[2] = f3; fs[3] = f4
        xsABM += [x]
    return xsABM

xsABM = ABM(x0)
fig = plt.figure(figsize=(10,3))
plt.xlabel("t");plt.ylabel("abs. diff.");plt.yscale("log")
plt.plot(tr,abs(xe-np.array(xs[:-1])),label="Euler")
plt.plot(tr,abs(xe-np.array(xsRK4[:-1])),label="RK4")
plt.plot(tr,abs(xe-np.array(xsAB4[:-1])),label="AB4")
plt.plot(tr,abs(xe-xsABM[:-1]),label="ABM4")
plt.legend();plt.show();plt.close()
